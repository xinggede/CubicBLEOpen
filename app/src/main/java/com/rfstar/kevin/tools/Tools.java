package com.rfstar.kevin.tools;import android.app.Activity;import android.content.Context;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.graphics.Bitmap.Config;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.PorterDuff.Mode;import android.graphics.PorterDuffXfermode;import android.graphics.Rect;import android.graphics.RectF;import android.telephony.TelephonyManager;import android.util.DisplayMetrics;import com.rfstar.kevin.R;import java.text.DecimalFormat;/** * 工具类 * * @author Kevin.wu */public class Tools {    /**     * 字节转十六进制 为相应的字符串显示     *     * @param data     * @return     */    public static String byte2Hex(byte data[]) {        if (data != null && data.length > 0) {            StringBuilder sb = new StringBuilder(data.length);            for (byte tmp : data) {                sb.append(String.format("%02X ", tmp));            }            return sb.toString();        }        return "no data";    }    /**     * 将byte转换为一个长度为8的byte数组，数组每个值代表bit     */    public static byte[] getBooleanArray(byte b) {        byte[] array = new byte[8];        for (int i = 7; i >= 0; i--) {            array[i] = (byte) (b & 1);            b = (byte) (b >> 1);        }        return array;    }    /**     * 把byte转为bit     *     * @param array     * @return     */    public static byte getByteFromBooleanArray(byte[] array) {        byte bit = 0;        for (int i = 0; i < array.length; i++) {            array[i] = (byte) (array[i] & 0x1);            bit += (array[i] << (array.length - i - 1));        }        // bit = (byte) (bit + 127);        return (byte) bit;    }    /**     * 把byte转为字符串的bit     */    public static String byteToBit(byte b) {        return "" + (byte) ((b >> 7) & 0x1) + (byte) ((b >> 6) & 0x1) + " "                + (byte) ((b >> 5) & 0x1) + (byte) ((b >> 4) & 0x1) + " "                + (byte) ((b >> 3) & 0x1) + (byte) ((b >> 2) & 0x1) + " "                + (byte) ((b >> 1) & 0x1) + (byte) ((b >> 0) & 0x1);    }    /**     * 把byte转为字符串的bit     *     * @param b     * @param length     * @return     */    public static String byteToBit(byte b, int length) {        String bitString = "";        for (int i = (length - 1); i >= 0; i--) {            bitString += (byte) (b >> i) & 0x1;            // b = (byte) (b >> 1);        }        char array[] = bitString.toCharArray();        return bitString;//array[5]+array[4]+" "+array[3]+array[2]+" "+array[1]+array[0]+" ";    }    /**     * 图片圆角     *     * @param bitmap     * @return     */    public static Bitmap toRoundCorner(Bitmap bitmap, int color) {        int jiange = 10;        Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),                bitmap.getHeight(), Config.ARGB_8888);        Canvas canvas = new Canvas(output);        final Paint paint = new Paint();        final Rect rect = new Rect(jiange, jiange, bitmap.getWidth() - jiange,                bitmap.getHeight() - jiange);        final RectF rectF = new RectF(rect);        final float roundPx = bitmap.getHeight() / 2;        paint.setAntiAlias(true);        canvas.drawARGB(0, 0, 0, 0);        paint.setColor(color);        canvas.drawRoundRect(rectF, roundPx, roundPx, paint);        paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));        canvas.drawBitmap(bitmap.extractAlpha(), rect, rect, paint);        return output;    }    /**     * 获取版本号     *     * @return 当前应用的版本号     */    public static String getVersion(Context context) {        try {            PackageManager manager = context.getPackageManager();            PackageInfo info = manager.getPackageInfo(context.getPackageName(),                    0);            String version = info.versionName;            return "V" + version;        } catch (Exception e) {            e.printStackTrace();            return context.getString(R.string.nodata);        }    }}